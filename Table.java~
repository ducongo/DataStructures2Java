

import java.util.ArrayList;
import java.util.List;

/**

*/

public class Table<T> implements AbstractTable<T> {

   /**

   * You decide on the instance variables you need.

   */
   List<ArrayList<T>>rows;
   int brows,bcols;

   //private ArrayList<ArrayList<T>> rows;
   public Table(Class<T> t) {
       rows = new ArrayList<ArrayList<T>>();
       brows=0;
       bcols=0;

   }

   public int rows() {
       return brows;
   }

   public int cols() {
       return bcols;

   }
   public T get(int i, int j) {
       if (i < 0 || i > rows() - 1 || j < 0 || j > cols()-1)throw new IndexOutOfBoundsException();
       return rows.get(i).get(j);

   }

   public T set(int i, int j, T x) {
       if (i < 0 || i > rows() - 1 || j < 0 || j > cols()-1)
           throw new IndexOutOfBoundsException();
       return rows.get(i).set(j,x);
   }

   public void addRow(int i) {
       if (i < 0 || i > rows()) throw new IndexOutOfBoundsException();
       brows++;
       ArrayList<T> newRow = new ArrayList<T>();
       for(int j = 0; j < cols(); j++)
           newRow.add(null);
       rows.add(i , newRow);
       //System.out.println(rows() +"");




   }

   public void removeRow(int i) {
       if (i < 0 || i > rows() - 1) throw new IndexOutOfBoundsException();
       brows--;
       rows.remove(i);
   }

   public void addCol(int j) {
       if (j < 0 || j > cols()) throw new IndexOutOfBoundsException();
       bcols++;

       for(int i=0; i < rows();i++){
         rows.get(i).remove(j);
       }

   }

   public void removeCol(int j) {
       if (j < 0 || j > cols() - 1) throw new IndexOutOfBoundsException();
       bcols--;
       for(int i = 0; i < rows(); i++)
       {
           rows.get(i).remove(j);

       }

   }

   public String toString() {
       StringBuilder sb = new StringBuilder();
       for (int i = 0; i < rows(); i++) {
           for (int j = 0; j < cols(); j++) {
               sb.append(String.valueOf(get(i, j)));
               sb.append(" ");
           }

           sb.append("\n");

       }

       return sb.toString();

   }

   /* Here is the expected output from this main function:

1111 null null null null null

null 2222 null null null null

null null 3333 null null null

null null null 4444 null null

null null null null 5555 null

null null null null null 6666

7777 null null null null null

null 8888 null null null null

null null 9999 null null null

1111 null null null null null null

null 2222 null null null null null

null null null 3333 null null null

null null null null null null null

null null null null 4444 null null

null null null null null 5555 null

null null null null null null 6666

7777 null null null null null null

null 8888 null null null null null

null null null 9999 null null null

   */

   public static void main(String[] args) {

       int numrows = 9, numcols = 6;

       Table<Integer> t = new Table<Integer>(Integer.class);

       for (int i = 0; i < numcols; i++) {

           t.addCol(t.cols());

       }

       for (int i = 0; i < numrows; i++) {

           t.addRow(t.rows());

       }

       for (int i = 1; i <= numrows; i++) {

           t.set(i-1, (i-1)%t.cols(), 1111*i);

       }
       System.out.println(t.toString());
       t.addCol(2);
       t.addRow(3);
       System.out.println(t.toString());

   }

}
